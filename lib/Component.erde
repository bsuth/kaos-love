-- Create a new Component, optionally composed of multiple parent components.
-- Parent precedence is determined by the order they are provided in, i.e.
-- parents provided earlier will take precedence over those provided later.
return (...Parents) -> {
  local component = {}
  local componentMT = {}
  local instanceMT = {}

  componentMT.__newindex = (_, key, value) -> {
    if key:match('^__') {
      instanceMT[key] = value
    }
  }

  -- Check #Parents to optimize most common use cases
  if #Parents == 0 {
    componentMT.__call = (t, instance = {}) -> {
      component.init?(instance)
      setmetatable(instance, instanceMT)
      return instance
    }
  } elseif #Parents == 1 {
    local [ Parent ] = Parents
    instanceMT.__index = (t, key) -> Parent[key]
    componentMT.__call = (t, instance = {}) -> {
        Parent(instance)
        component.init?(instance)
        setmetatable(instance, instanceMT)
        return instance
    }
  } else {
    instanceMT.__index =  (t, key) -> {
      for i, Parent in pairs(Parents) {
        if Parent[key] ~= nil {
          return Parent[key]
        }
      }
    }
    componentMT.__call = (t, instance = {}) -> {
      for i, Parent in pairs(Parents) {
        Parent(instance)
      }

      component.init?(instance)
      setmetatable(instance, component)
      return instance
    }
  }

  setmetatable(component, componentMT)
  return component
}
