-- Create a new base class. This provides necessary boilerplate to ensure the
-- class is composable.
module function Base(constructor) {
  local Class = {}
  Class.__index = Class

  Class.new = type(constructor) == 'function'
    ? (...) -> setmetatable(constructor(...), Class)
    : () -> setmetatable({}, Class)

  return Class
}

-- Create a new class my composing multiple parent classes. Precedence is
-- determined by the order they are provided in, i.e. parent classes provided
-- earlier will take precedence over those provided later.
module function compose(...Parents) {
  -- TODO: combined constructor?
  return setmetatable(Base(), {
    __index = (t, key) -> {
      for i, Parent in pairs(Parents) {
        if Parent[key] ~= nil {
          return Parent[key]
        }
      }
    },
  })
}
