-- Create a new Component, optionally composed of multiple parent components.
-- Parent precedence is determined by the order they are provided in, i.e.
-- parents provided earlier will take precedence over those provided later.
module function Component(...Parents) {
  local component = {}

  -- Check #Parents to optimize most common use cases
  if #Parents == 0 {
    setmetatable(component, {
      __call = (instance = {}) -> {
        component.__constructor?(instance)
        return instance
      },
    })
  } elseif #Parents == 1 {
    local [ Parent ] = Parents
    setmetatable(component, {
      __index = (t, key) -> Parent[key],
      __call = (instance = {}) -> {
        Parent(instance)
        component.__constructor?(instance)
        return instance
      },
    })
  } else {
    setmetatable(component, {
      __index = (t, key) -> {
        for i, Parent in pairs(Parents) {
          if Parent[key] ~= nil {
            return Parent[key]
          }
        }
      },

      __call = (instance = {}) -> {
        for i, Parent in pairs(Parents) {
          Parent(instance)
        }

        component.__constructor?(instance)
        return instance
      },
    })
  }


  return component
}
