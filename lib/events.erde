local { Component } = require('lib.components')

local eventListenerIdCounter = 0
local a,b
local eventListeners = {
  keyPressed = {},
  keyReleased = {},
  mouseMoved = {},
  mousePressed = {},
  mouseReleased = {},
  wheelMoved = {},
  gamepadAxis = {},
  gamepadPressed = {},
  gamepadReleased = {},
  joystickAdded = {},
  joystickAxis = {},
  joystickHat = {},
  joystickPressed = {},
  joystickReleased = {},
  joystickRemoved = {},

  upStart = {},
  upEnd= {},
  rightStart = {},
  rightEnd= {},
  downStart = {},
  downEnd= {},
  leftStart = {},
  leftEnd= {},
}

module function addEventListener(event, callback) {
  a = eventListeners
  eventListeners[event] ??= {}
  eventListenerIdCounter += 1
  eventListeners[event][eventListenerIdCounter] = callback
  return eventListenerIdCounter
}

module function removeEventListener(event, eventListenerId) {
  eventListeners[event][eventListenerId] = nil
}

module function emitEvent(event, ...) {
  for id, eventListener in pairs(eventListeners[event]) {
    eventListener(...)
  }
}

-- -----------------------------------------------------------------------------
-- EventEmitter
-- -----------------------------------------------------------------------------

module EventEmitter = Component()

function EventEmitter.__constructor(t) {
  t.eventListenerIdCounter = 0
  t.eventListeners = {}
}

function EventEmitter:addEventListener(event, callback) {
  self.eventListeners[event] ??= {}
  self.eventListenerIdCounter += 1
  self.eventListeners[event][self.eventListenerIdCounter] = callback
  return self.eventListenerIdCounter
}

function EventEmitter:removeEventListener(event, eventListenerId) {
  self.eventListeners[event][eventListenerId] = nil
}

function EventEmitter:emitEvent(event, ...) {
  for id, eventListener in pairs(self.eventListeners[event]) {
    eventListener(...)
  }
}
