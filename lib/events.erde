local { Base } = require('lib.compose')

local eventListenerIdCounter = 0

local nativeEventListeners = {
  keypressed = {},
  keyreleased = {},
  mousemoved = {},
  mousepressed = {},
  mousereleased = {},
  wheelmoved = {},
  gamepadaxis = {},
  gamepadpressed = {},
  gamepadreleased = {},
  joystickadded = {},
  joystickaxis = {},
  joystickhat = {},
  joystickpressed = {},
  joystickreleased = {},
  joystickremoved = {},
}

local eventListeners = {
  ...nativeEventListeners,
  upStart = {},
  upEnd= {},
  rightStart = {},
  rightEnd= {},
  downStart = {},
  downEnd= {},
  leftStart = {},
  leftEnd= {},
}

module function addEventListener(event, callback) {
  eventListeners[event] ??= {}
  eventListenerIdCounter += 1
  eventListeners[event][eventListenerIdCounter] = callback
  return eventListenerIdCounter
}

module function removeEventListener(event, eventListenerId) {
  eventListeners[event][eventListenerId] = nil
}

module function invokeEvent(event, args) {
  for id, eventListener in pairs(eventListeners[event]) {
    eventListener(args)
  }
}

-- -----------------------------------------------------------------------------
-- LOVE Lifecycles
-- -----------------------------------------------------------------------------

for nativeEvent, listeners in pairs(nativeEventListeners) {
  love[nativeEvent] = (...) -> invokeEvent(nativeEvent, {...})
}

-- -----------------------------------------------------------------------------
-- EventEmitter
-- -----------------------------------------------------------------------------

module EventEmitter = Base(() -> ({ handlers = {} }))

function EventEmitter:on(event, callback) { }
